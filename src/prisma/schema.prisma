generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  TENANT
  LANDLORD
  SUPER_ADMIN 
  ADMIN
}

enum PropertyType {
  APARTMENT
  HOUSE
  STUDIO
  VILLA
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
}

model RoleRequest {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @unique
  requestedRole Role
  status        RequestStatus
  createdAt     DateTime      @default(now())
}

model LandlordDoc {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  publicId    String       
  url         String        
  docType     String      
  status      RequestStatus @default(PENDING)
  reason      String?      
  uploadedAt  DateTime      @default(now())
  reviewedAt  DateTime?
  reviewerId  String?     

  @@index([userId, status])
}

model User {
  id                          String                @id @default(uuid())
  role                        Role
  email                       String                @unique
  password                    String
  name                        String
  profilePhoto                String?
  bookings                    Booking[]             @relation("TenantBookings")
  properties                  Property[]            @relation("LandlordProperties")
  reviews                     Review[]
  sentMessages                Message[]             @relation("SentMessages")
  recvMessages                Message[]             @relation("RecvMessages")
  subscriptions               PushSubscription[]
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  RoleRequest                 RoleRequest?
  landlordDocs                LandlordDoc[]

  isVerified                  Boolean               @default(false)
  verificationOtp             String?               // hashed OTP
  verificationOtpExpiresAt    DateTime?             // expiry timestamp

  resetToken                  String?
  resetTokenExpiresAt         DateTime?
}


model Property {
  id               String           @id @default(uuid())
  landlord         User             @relation("LandlordProperties", fields: [landlordId], references: [id], onDelete: Cascade)
  landlordId       String
  title            String
  description      String
  city             String
  rentPerMonth     Decimal          @db.Decimal(10, 2)
  numBedrooms      Int
  numBathrooms     Int
  propertyType     PropertyType
  amenities        String[]
  images           PropertyImage[]
  bookings         Booking[]
  reviews          Review[]

  /// ─── Approval workflow fields ───
  status           ListingStatus    @default(PENDING)
  rejectionReason  String?

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  Message          Message[]

  @@index([city])
  @@index([rentPerMonth])
}

model PropertyImage {
  id         String   @id @default(uuid())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  fileName   String
  publicId   String?
  url        String
  createdAt  DateTime @default(now())
}

model Booking {
  id         String        @id @default(uuid())
  tenant     User          @relation("TenantBookings", fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   String
  property   Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  startDate  DateTime
  endDate    DateTime
  status     BookingStatus
  payment    Payment?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([propertyId, startDate, endDate])
}

model Payment {
  id            String        @id @default(uuid())
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId     String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("ETB")
  transactionId String?
  status        PaymentStatus
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Review {
  id         String   @id @default(uuid())
  tenant     User     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  rating     Int
  title      String
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([tenantId, propertyId])
}

model Message {
  id         String    @id @default(uuid())
  sender     User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User      @relation("RecvMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  propertyId String?
  content    String
  sentAt     DateTime  @default(now())
  read       Boolean   @default(false)
  deleted    Boolean   @default(false)
  editedAt   DateTime?

  @@index([receiverId, read])
  @@index([receiverId, deleted])
  @@index([editedAt])
}

model PushSubscription {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
}
